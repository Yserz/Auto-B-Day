<?xml version="1.0" encoding="UTF-8"?>
<!-- You may freely edit this file. See commented blocks below for -->
<!-- some examples of how to customize the build. -->
<!-- (If you delete it and reopen the project it will be recreated.) -->
<!-- By default, only the Clean and Build commands use this build script. -->
<!-- Commands such as Run, Debug, and Test only use this build script if -->
<!-- the Compile on Save feature is turned off for the project. -->
<!-- You can turn off the Compile on Save (or Deploy on Save) setting -->
<!-- in the project's Project Properties dialog box.-->
<project name="Auto-B-Day" default="default" basedir="." xmlns:ear="http://www.netbeans.org/ns/j2ee-earproject/2" xmlns:ivy="antlib:org.apache.ivy.ant">
    <description>Builds, tests, and runs the project Auto-B-Day.</description>
    <!--<import file="nbproject/build-impl.xml"/>-->
	
	<description>
		
	</description>

	<property file="build.properties" />
	
	<!-- =================================
		          target: Default
		 ================================= -->
	<target name="default" depends="init,compile-ejb,compile-war,jar,war">
		
	</target>
	
	<!-- =================================
		          target: Init
		 ================================= -->
	<target name="init">
		<!--clean-->
		<mkdir dir="${build.dir}" />
		<mkdir dir="${ant.project.name}-ejb/${build.dir}" />
		<mkdir dir="${ant.project.name}-war/${build.dir}" />
		<delete>
			<!--clean General-->
			<fileset dir="${build.dir}" includes="**/*"/>
			<!--clean EJB-->
			<fileset dir="${ant.project.name}-ejb/${build.dir}" includes="**/*"/>
			<!--clean WAR-->
			<fileset dir="${ant.project.name}-war/${build.dir}" includes="**/*"/>
		</delete>
		
		<!--init General-->
		<mkdir dir="${build.dir}" />
		<!--JUnit-->
		<mkdir dir="${reports.xml.dir}" />
		<mkdir dir="${reports.html.dir}" />
		<!--Cobertura-->
		<mkdir dir="${cob.inst.dir}" />
		<mkdir dir="${cob.rep.html}" />
		<mkdir dir="${cob.rep.xml}" />
		<!--Checkstyle-->
		<mkdir dir="${cs.rep.xml}" />
		<mkdir dir="${cs.rep.html}" />
		<!--Findbugs-->
		<mkdir dir="${fb.rep.html}" />
		
		<!--init EJB-->
		<mkdir dir="${ant.project.name}-ejb/${build.dir}" />
		<mkdir dir="${ejb.classes.dir}" />
		<!--JUnit-->
		<mkdir dir="${ant.project.name}-ejb/${reports.xml.dir}" />
		<mkdir dir="${ant.project.name}-ejb/${reports.html.dir}" />
		
		<!--init WAR-->
		<mkdir dir="${ant.project.name}-war/${build.dir}" />
		<mkdir dir="${war.classes.dir}" />
		<!--JUnit-->
		<mkdir dir="${ant.project.name}-war/${reports.xml.dir}" />
		<mkdir dir="${ant.project.name}-war/${reports.html.dir}" />
		
	</target>
	
	<!-- =================================
		          target: Compile
		 ================================= -->
	<target name="compile-ejb" depends="init,report">
		<copy todir="${ejb.classes.dir}/META-INF">
		    <fileset dir="${ejb.src.dir}/META-INF"/>
		  </copy>
		<path id="ejb.classpath">
			<fileset dir="${ejb.lib.default.dir}">
				<include name="**/*.jar" />
			</fileset>
		</path>
		<!--
		<path id="ejb-test.classpath">
			<fileset dir="${ejb.lib.test.dir}">
				<include name="*.jar" />
			</fileset>
		</path>
		-->
		<javac srcdir="${ejb.src.dir}" destdir="${ejb.classes.dir}" debug="yes">
			<classpath refid="ejb.classpath" />
		</javac>
	</target>
	
	<target name="compile-war" depends="init,report">
		<path id="war.classpath">
			<fileset dir="${war.lib.default.dir}">
				<include name="*.jar" />
			</fileset>
		</path>
		<!--
		<path id="war-test.classpath">
			<fileset dir="${war.lib.test.dir}">
				<include name="*.jar" />
			</fileset>
		</path>
		-->
		<javac srcdir="${war.src.dir}" destdir="${war.classes.dir}" debug="yes">
			<classpath refid="war.classpath" />
		</javac>
	</target>

	<!-- =================================
		          target: JAR
		 ================================= -->
	<target name="jar" depends="init,compile-ejb">
		<jar destfile="${build.dir}/${ant.project.name}.jar">
			<fileset dir="${ejb.classes.dir}" />
			<fileset dir="${ejb.lib.dir}">
				<include name="**/*.jar" />
			</fileset>
		</jar>
	</target>
	
	<!-- =================================
		          target: WAR
		 ================================= -->
	<target name="war" depends="init,compile-war,jar">
		<war destfile="${build.dir}/${ant.project.name}.war">
			<fileset dir="${build.dir}">
				<include name="*.jar" />
			</fileset>
			<fileset dir="${war.web.dir}">
				<include name="**/*.*" />
			</fileset>
			<fileset dir="${war.classes.dir}" />
			<fileset dir="${war.lib.dir}">
				<include name="**/*.jar" />
			</fileset>
		</war>
	</target>
	<!-- =================================
		          target: Test
		 ================================= -->
	<target name="test" depends="init, compile-ejb,compile-war">
		 
	</target>

	<!-- =================================
		          target: Cobertura
		 ================================= -->
	<target name="cob-instr" depends="compile-ejb,compile-war">
	
	</target>

	<target name="cob-rep" depends="cob-instr, test" description="erzeugt Cobertura Reports">
		
	</target>
	
	<!-- ================================= 
          target: clean-cache              
         ================================= -->
	<target name="clean-cache" description="--> clean the ivy cache">
		<ivy:cleancache />
	</target>
	
	<!-- ================================= 
          target: resolve              
         ================================= -->
    <target name="resolve" description="--> retreive dependencies with ivy">
		<property name="ivy.settings.dir" value="settings" />
		<ivy:settings file="${ivy.settings.dir}/ivysettings.xml" />
        <ivy:retrieve pattern="${ejb.lib.default.dir}"/>
    </target>    
    
    <!-- ================================= 
          target: report              
         ================================= -->
    <target name="report" depends="resolve" description="--> generates a report of dependencies">
        <ivy:report todir="${build.dir}"/>
    </target>
	
    <!--

    There exist several targets which are by default empty and which can be 
    used for execution of your tasks. These targets are usually executed 
    before and after some main targets. They are: 

      pre-init:                 called before initialization of project properties 
      post-init:                called after initialization of project properties 
      pre-compile:              called before javac compilation 
      post-compile:             called after javac compilation 
      pre-dist:                 called before archive building 
      post-dist:                called after archive building 
      post-clean:               called after cleaning build products 
      pre-run-deploy:           called before deploying
      post-run-deploy:          called after deploying

    Example of pluging an obfuscator after the compilation could look like 

        <target name="post-compile">
            <obfuscate>
                <fileset dir="${build.classes.dir}"/>
            </obfuscate>
        </target>

    For list of available properties check the imported 
    nbproject/build-impl.xml file. 


    Other way how to customize the build is by overriding existing main targets.
    The target of interest are: 

      do-dist:                archive building
      run:                    execution of project 

    Example of overriding the target for project execution could look like 

        <target name="run" depends="<PROJNAME>-impl.jar">
            <exec dir="bin" executable="launcher.exe">
                <arg file="${dist.jar}"/>
            </exec>
        </target>

    Notice that overridden target depends on jar target and not only on 
    compile target as regular run target does. Again, for list of available 
    properties which you can use check the target you are overriding in 
    nbproject/build-impl.xml file. 

    -->
</project>
